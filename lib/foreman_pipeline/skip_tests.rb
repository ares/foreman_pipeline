require 'foreman_pipeline/plugin'

#skipping Bastion routes as they have no permissions
tests_to_skip = {
  "AccessPermissionsTest" => ["route bastion/bastion/index should have a permission that grants access",
                              "route bastion/bastion/index_ie should have a permission that grants access",
                              "route katello/api/v2/host_packages/auto_complete_search should have a permission that grants access"],
#skipping seeds tests because katello adds its settings and we get 'unexpected invocation' for mock object
  "SeedsTest" => ["all access permissions are created by permissions seed",
                  "doesn't add a template back that was deleted",
                  "doesn't add a template back that was renamed",
                  "don't seed location when a location already exists",
                  "don't seed organization when an org already exists",
                  "is idempotent",
                  "no audits are recorded",
                  "populates bookmarks",
                  "populates config templates",
                  "populates features",
                  "populates hidden admin users",
                  "populates installation media",
                  "populates partition tables",
                  "seed location when environment",
                  "seed location when environment SEED_LOCATION specified",
                  "seed organization when environment SEED_ORGANIZATION specified",
                  "viewer role contains all view permissions"],
  "SeedsTest::populating an initial admin user" => ["with defaults",
                                                    "with environment overrides"],
  "LocationTest" => ["selected_or_inherited_ids for inherited location",
                     "used_and_selected_or_inherited_ids for inherited location"],
  "OrganizationTest" => ["name can be the same if parent is different",
                         ".my_organizations returns user's associated orgs and children"],
#parent_id for organization is disabled by default
  "TaxonomixTest" => [".used_organization_ids can work with array of organizations"],
#bunch of broken tests, various causes
  "UserTest" => ["when a user logs in, last login time should be updated",
                 "return organization and child ids for non-admin user",
                 "#ensure_last_admin_is_not_deleted with non-admins",
                 "can search users by role id"],
  "UsergroupTest" => ["delete user if not in LDAP directory",
                      "add user if in LDAP directory",
                      "hosts should be retrieved from recursive/complex usergroup definitions",
                      "cannot be destroyed when in use by a host",
                      "add_users is case insensitive and does not add nonexistent users",
                      "remove users removes user list and is case insensitive"],

  "Api::TestableControllerTest::errors" => ["top level key is error, no metadata included"],
  "Api::V1::ComputeResourcesControllerTest" => ["should get index of owned"],
  "Api::V1::ConfigTemplatesControllerTest" => ["should get template detail", "should create valid"],
  "Api::V1::HostsControllerTest" => ["should not list a host out of users hosts scope"],
  "Api::V1::ReportsControllerTest" => ["should get last report", "should get last report for given host only"],
  "Api::V1::RolesControllerTest" => ["should get index"],
  "Api::V1::SmartProxiesControllerTest" => ["should get index filtered by type"],
  "Api::V2::HostsControllerTest::BMC proxy operations" => ["power call to interface",
                                                           "wrong power call fails gracefully",
                                                           "boot call to interface",
                                                           "wrong boot call to interface fails gracefully"],
  "Api::V2::HostsControllerTest" => ["should show specific status hosts",
                                     "should show hosts vm attributes",
                                     "should disassociate host",
                                     "should run puppet for specific host",
                                     "non-admin user with power_host permission can boot a vm",
                                     "template should return rendered template",
                                     "wrong template name should return not found",
                                     "test_rebuild_config_optimistic",
                                     "test_rebuild_config_pessimistic"],
  "Api::V2::LocationsControllerTest" => ["object name on show can be specified"],
  "Containers::StepsControllerTest" => ["image show doesnot load katello"],
  "HostsControllerTest::submit actions with multiple hosts" => ["destroy"],
  "LocationsControllerTest" => ["should delete null location",
                                "should clear the session if the user deleted their current location",
                                "should clone location with assocations"],
  "OrganizationsControllerTest" => ["should get edit",
                                    "should delete null organization",
                                    "should clear the session if the user deleted their current organization",
                                    "should clone organization with assocations"],
  "UnattendedControllerTest" => ["template with hostgroup should be identified as hostgroup provisioning"]
}

Foreman::Plugin.find(:foreman_pipeline).send :tests_to_skip, tests_to_skip
